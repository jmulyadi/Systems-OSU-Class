!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BITMASK	bitMinip.c	7;"	d	file:
BITMASK	bits.c	8;"	d	file:
CEILING	output.c	19;"	d	file:
CFLAGS	makefile	/^CFLAGS= -std=c99 -pedantic -Wformat -Wreturn-type $/;"	m
COLORBITMASK	bitMinip.c	6;"	d	file:
COLORBITMASK	bits.c	7;"	d	file:
DEBUG	debug.h	16;"	d
DELTATIME	output.c	11;"	d	file:
DELTATIME	physics.c	7;"	d	file:
END	output.c	17;"	d	file:
ERR	physics.c	14;"	d	file:
G	physics.c	8;"	d	file:
GRAPHICS	debug.h	14;"	d
JUMP_VEL	bits.c	16;"	d	file:
JUMP_VEL	output.c	16;"	d	file:
JUMP_VEL	physics.c	13;"	d	file:
JUMP_VEL	prototype4.c	12;"	d	file:
PAUSE	output.c	18;"	d	file:
RVAL_BAD_INIT	lab2.c	11;"	d	file:
RVAL_BAD_INPUT	lab2.c	10;"	d	file:
SHIFT	prototype3.c	6;"	d	file:
SHIFTBITS	bitMinip.c	8;"	d	file:
SHIFTBITS	bits.c	6;"	d	file:
SHIFTBITS	bits.c	9;"	d	file:
SHIFTCOLOR	bits.c	10;"	d	file:
SHIFTJUMP	bits.c	11;"	d	file:
TEXT	debug.h	13;"	d
VERBOSE	debug.h	12;"	d
X_POS	bits.c	12;"	d	file:
X_POS	output.c	12;"	d	file:
X_POS	physics.c	9;"	d	file:
X_POS	prototype4.c	8;"	d	file:
X_VEL	bits.c	14;"	d	file:
X_VEL	output.c	14;"	d	file:
X_VEL	physics.c	11;"	d	file:
X_VEL	prototype4.c	10;"	d	file:
X_shift	physics.c	/^void X_shift(double brutus[], double *time, int color)$/;"	f
Y_POS	bits.c	13;"	d	file:
Y_POS	output.c	13;"	d	file:
Y_POS	physics.c	10;"	d	file:
Y_POS	prototype4.c	9;"	d	file:
Y_VEL	bits.c	15;"	d	file:
Y_VEL	output.c	15;"	d	file:
Y_VEL	physics.c	12;"	d	file:
Y_VEL	prototype4.c	11;"	d	file:
Y_shift	physics.c	/^void Y_shift(double brutus[])$/;"	f
both_shift	physics.c	/^void both_shift(double brutus[], double *time, int color)$/;"	f
brutusCeilingText	output.c	/^void brutusCeilingText(double brutus[], double temp_Y_POS)$/;"	f
brutusJumpText	output.c	/^void brutusJumpText(double *time, double brutus[], int color)$/;"	f
checkBit	bitMinip.c	/^int checkBit(unsigned short hexNum)$/;"	f
checkColor	bitMinip.c	/^int checkColor(unsigned short hexNum)$/;"	f
checkColor	bits.c	/^int checkColor(unsigned short hexNum)$/;"	f
checkJumpVel	bitMinip.c	/^int checkJumpVel(unsigned short hexNum)$/;"	f
checkJumpVel	bits.c	/^double checkJumpVel(unsigned short hexNum)$/;"	f
checkX_VEL	bitMinip.c	/^int checkX_VEL(unsigned short hexNum)$/;"	f
check_X_VEL	bits.c	/^double check_X_VEL(unsigned short hexNum)$/;"	f
decodeBits	bits.c	/^int decodeBits(unsigned short hexNum, double brutus[])$/;"	f
endText	output.c	/^void endText(double brutus[], double time, int color)$/;"	f
flag_graphics	output.c	/^void flag_graphics(double brutus[], int color, double time)$/;"	f
good_input_run	output.c	/^int good_input_run()$/;"	f
init	output.c	/^int init()$/;"	f
isInputGood	input.c	/^int isInputGood(unsigned short hexNum, double brutus[], int color)$/;"	f
main	bitMinip.c	/^int main()$/;"	f
main	lab2.c	/^int main()$/;"	f
main	prototype1.c	/^int main()$/;"	f
main	prototype2.c	/^int main()$/;"	f
main	prototype3.c	/^int main() {$/;"	f
main	prototype3.h	/^int main() {;$/;"	f
main	prototype4.c	/^int main()$/;"	f
master_graphics	output.c	/^double master_graphics(double brutus[], int color)$/;"	f
master_output	output.c	/^double master_output(double brutus[], int color)$/;"	f
master_text	output.c	/^void master_text(double brutus[], int color)$/;"	f
master_text	prototype4.c	/^void master_text(double brutus[], int color)$/;"	f
move_brutus	physics.c	/^void move_brutus(double brutus[])$/;"	f
printHitFloorCeiling	output.c	/^void printHitFloorCeiling(double brutus[], double original_Y_VEL)$/;"	f
readInput	input.c	/^int readInput()$/;"	f
readInput	prototype3.c	/^int readInput(double brutus[])$/;"	f
teardown	output.c	/^void teardown()$/;"	f
time_adjust	output.c	/^void time_adjust(double *time)$/;"	f
validateInput	bitMinip.c	/^int validateInput(unsigned short hexNum)$/;"	f
validateInput	bits.c	/^int validateInput(unsigned short hexNum, double brutus[], int color)$/;"	f
writeGraphics	output.c	/^void writeGraphics(double brutus[], int color)$/;"	f
